import { Sandbox } from '@e2b/code-interpreter'
import { Groq } from 'groq-sdk'
import 'dotenv/config'

const e2bApiKey = process.env.E2B_API_KEY
const groqApiKey = process.env.GROQ_API_KEY

// Initialize Groq client
const client = new Groq({ apiKey: groqApiKey })

const LLM_MODEL = "llama-3.3-70b-versatile"
const SYSTEM_PROMPT = `You are a Python data scientist. Generate simple code that:
1. Uses numpy to generate 5 random numbers
2. Prints only the mean and standard deviation in a clean format
Example output format:
Mean: 5.2
Std Dev: 1.8`

const USER_PROMPT = "Generate 20 random whole numbers between 1 and 100, print those numbers, and show their mean and standard deviation"

async function main() {
    // Create sandbox instance (by default, sandbox instances stay alive for 5 mins)
    const sandbox = await Sandbox.create({ apiKey: e2bApiKey })

    try {
        // Get code from Groq
        const response = await client.chat.completions.create({
            model: LLM_MODEL,
            messages: [
                { role: "system", content: SYSTEM_PROMPT },
                { role: "user", content: USER_PROMPT },
            ],
        })

        // Extract and run the code
        let code = response.choices[0].message.content
        if (code.includes("```python")) {
            code = code.split("```python")[1].split("```")[0]
        }

        console.log("System Prompt:")
        console.log(SYSTEM_PROMPT)
        console.log("\nUser Prompt:")
        console.log(USER_PROMPT)

        console.log(`\nThe following is the Python code is generated by the model: [${LLM_MODEL}]\n`)
        console.log(`\`\`\`python\n${code}\n\`\`\``)

        console.log("\nExecuting code in sandbox...")
        const execution = await sandbox.runCode(code)
        console.log(execution.logs.stdout[0])

    } catch (error) {
        console.error("Error:", error)
    } finally {
        // Clean up sandbox (optional)
        // await sandbox.close()
    }
}

// Run the main function
main().catch(console.error)